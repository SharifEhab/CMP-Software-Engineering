{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Fox API",
    "description" : "This is an API for Reddit simulation",
    "contact" : {
      "email" : "Sharif.Mohammad02@eng-st.cu.edu.eg"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/software_eng_fox/FoxAPI/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://virtserver.swaggerhub.com/SharifMohammad/FoxAPI/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "tags" : [ {
    "name" : "User System",
    "description" : "User system API"
  }, {
    "name" : "Listings",
    "description" : "Dealing with posts"
  }, {
    "name" : "HomePage",
    "description" : "HomePage APIs"
  }, {
    "name" : "Posts and Interactions",
    "description" : "Posts and Interactions  API"
  }, {
    "name" : "Notifications",
    "description" : "Notifications APIs"
  }, {
    "name" : "Search",
    "description" : "Search APIs"
  }, {
    "name" : "Messages",
    "description" : "Messages APIs"
  }, {
    "name" : "Moderation",
    "description" : "Community and moderation API"
  } ],
  "paths" : {
    "/login" : {
      "post" : {
        "tags" : [ "User System" ],
        "summary" : "login to account",
        "description" : "login using username and password",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/login_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "404" : {
            "description" : "wrong username or password."
          }
        }
      }
    },
    "/signup" : {
      "post" : {
        "tags" : [ "User System" ],
        "summary" : "create new account",
        "description" : "signup using email and password",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/signup_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "400" : {
            "description" : "there is an existing username use another one."
          }
        }
      }
    },
    "/login/forget" : {
      "post" : {
        "tags" : [ "User System" ],
        "summary" : "change password or username",
        "description" : "By passing in the appropriate options, when a user forget password or username he can still can log in using email.\n",
        "operationId" : "forgetPasswordOrUsername",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/login_forget_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "success"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "user is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/block_user" : {
      "post" : {
        "tags" : [ "User System" ],
        "summary" : "Block account",
        "description" : "By passing in the appropriate options, current user can mark another user as blocked\n",
        "operationId" : "blockAccount",
        "requestBody" : {
          "description" : "User id to block",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/blockUserItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Account is blocked"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "404" : {
            "description" : "Account is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/friend" : {
      "post" : {
        "tags" : [ "User System" ],
        "summary" : "Add friend request",
        "description" : "this api is responisble for any relation between user and other user or between user and subreddit so in the prarameters there is type of relation that has to be one of [\"friend\", \"moderator\", \"moderator_invite\", \"contributor\", \"banned, \"muted\"], and some parameters related to this relation  bancontext and banmessage and banreason and attribute of duration that is in charge of duartion of this relation if we don't want to estimate certain duration set the duration to null",
        "operationId" : "addFriend",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_friend_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "friend request has been sent successfully"
          },
          "404" : {
            "description" : "user is not found"
          },
          "401" : {
            "description" : "unauthorized user token"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/unfriend" : {
      "post" : {
        "tags" : [ "User System" ],
        "summary" : "unfriend an account",
        "description" : "this api is complement of friend as it used to remove the relation between user and user or user and subreddit so in the parameters there is type of relation that has to be one of these types [\"friend\", \"moderator\", \"moderator_invite\", \"contributor\", \"banned, muted\"]\n",
        "operationId" : "unfriend",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_unfriend_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfully removed the specified relation"
          },
          "404" : {
            "description" : "user is not found"
          },
          "401" : {
            "description" : "unauthorized user token"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/v1/me/friends/{username}" : {
      "get" : {
        "tags" : [ "User System" ],
        "description" : "Get information about a specific 'friend', such as notes.",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "u/Abdelrahman_Ahmed"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Got the friend information Successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userItem"
                }
              }
            }
          },
          "404" : {
            "description" : "couldn't find friend"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "User System" ],
        "summary" : "Delete friend",
        "description" : "By passing in the appropriate options, the current user can delete a friend.\n",
        "operationId" : "deleteAccount",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "u/Abdelrahman_Ahmed"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Account is deleted"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "404" : {
            "description" : "Account is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/username_available" : {
      "get" : {
        "tags" : [ "User System" ],
        "summary" : "check if username taken or not",
        "description" : "check if the username is available or no.",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "sharif29"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Avaliable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "example" : "Avaliable"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Avaliable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "example" : "Not Avaliable"
                }
              }
            }
          }
        }
      }
    },
    "/user/{username}/about" : {
      "get" : {
        "tags" : [ "User System" ],
        "summary" : "get user about",
        "description" : "get user about info\n",
        "operationId" : "getAbout",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t2_AhmedLotfy02"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getAbout"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/user/{username}/overview" : {
      "get" : {
        "tags" : [ "User System" ],
        "summary" : "get user overview",
        "description" : "will return whatever posts, comments or replies a user has written before  \n",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "sharif29"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        }, {
          "name" : "t",
          "in" : "query",
          "description" : "one of (hour, day, week, month, year, all)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "month"
        } ],
        "responses" : {
          "200" : {
            "description" : "succeded get your overview",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/commentOrReply"
                    }, {
                      "$ref" : "#/components/schemas/post"
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/user/{username}/submitted" : {
      "get" : {
        "tags" : [ "User System" ],
        "description" : "will return whatever post a user has written before\n",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "sharif29"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        }, {
          "name" : "t",
          "in" : "query",
          "description" : "one of (hour, day, week, month, year, all)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "month"
        } ],
        "responses" : {
          "200" : {
            "description" : "succeeded get your posts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getPosts"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/user/{username}/comments" : {
      "get" : {
        "tags" : [ "User System" ],
        "summary" : "get user comments",
        "description" : "will return whatever comments and replies a user has written before   \n",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "sharif29"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        }, {
          "name" : "t",
          "in" : "query",
          "description" : "one of (hour, day, week, month, year, all)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "month"
        } ],
        "responses" : {
          "200" : {
            "description" : "succeeded get your comments and replies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getLinks"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/user/{username}/upvoted" : {
      "get" : {
        "tags" : [ "User System" ],
        "description" : "will return whatever posts you upvoted   \n",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "sharif29"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "succeeded get your upvoted posts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/user/{username}/downvoted" : {
      "get" : {
        "tags" : [ "User System" ],
        "description" : "will return whatever posts you downvoted\n",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "sharif29"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "succeeded get your downvoted posts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/v1/me" : {
      "get" : {
        "tags" : [ "User System" ],
        "summary" : "get user identity",
        "description" : "get user identity\n",
        "operationId" : "getIdentity",
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userItem"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/v1/me/prefs" : {
      "get" : {
        "tags" : [ "User System" ],
        "summary" : "get user preferences",
        "description" : "get user preferences\n",
        "operationId" : "getPref",
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/userPrefs"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "User System" ],
        "summary" : "user edit a account prefrences",
        "description" : "user edit a account prefrencese\n",
        "operationId" : "editPrefs",
        "requestBody" : {
          "description" : "prefs to be edited",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/userPrefs"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "prefs is edited"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/best" : {
      "get" : {
        "tags" : [ "Listings" ],
        "description" : "will return new posts from random subreddits\n",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the best posts successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getPosts"
                }
              }
            }
          },
          "404" : {
            "description" : "Can't find this subreddit"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/hot" : {
      "get" : {
        "tags" : [ "Listings" ],
        "description" : "will return new posts in certain subreddit if name of passed subreddit if exist and if subreddit isn't passed will return from random subreddits \n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "funny"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "succeded get the hot posts in the sub reddit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getPosts"
                }
              }
            }
          },
          "404" : {
            "description" : "not found this subreddit"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/new" : {
      "get" : {
        "tags" : [ "Listings" ],
        "description" : "will return new posts in certain subreddit if name of passed subreddit if exist and if subreddit isn't passed will return from random subreddits \n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "succeded get the new posts in the sub reddit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getPosts"
                }
              }
            }
          },
          "404" : {
            "description" : "not found this subreddit"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/top" : {
      "get" : {
        "tags" : [ "Listings" ],
        "description" : "will return top posts in certain subreddit if name of passed subreddit if exist and if subreddit isn't passed will return from random subreddits \n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        }, {
          "name" : "t",
          "in" : "query",
          "description" : "one of (hour, day, week, month, year, all)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "month"
        } ],
        "responses" : {
          "200" : {
            "description" : "succeded get the top posts in the sub reddit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getPosts"
                }
              }
            }
          },
          "404" : {
            "description" : "not found this subreddit"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/random" : {
      "get" : {
        "tags" : [ "Listings" ],
        "description" : "will return random posts in certain subreddit if name of passed subreddit if exist and if subreddit isn't passed will return from random subreddits \n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "succeded get the random posts in the sub reddit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getPosts"
                }
              }
            }
          },
          "404" : {
            "description" : "not found this subreddit"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/trendingsearches" : {
      "get" : {
        "tags" : [ "HomePage" ],
        "summary" : "get trending searches",
        "description" : "get the trending searches.",
        "responses" : {
          "200" : {
            "description" : "return a valid subreddits.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/subreddit"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "operation failed"
          }
        }
      }
    },
    "/api/subscribe" : {
      "post" : {
        "tags" : [ "HomePage" ],
        "summary" : "subscribe to a subreddit",
        "description" : "subscribe (put action = sub) or unsubscribe (put action = unsub) to a subreddit.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_subscribe_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "404" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/get_specific_category" : {
      "get" : {
        "tags" : [ "HomePage" ],
        "summary" : "get specific category",
        "description" : "get bunch of subreddits of specific category just pass the category name in the body and the index of the pagination.",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Gaming"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "return an array of subreddits.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/subreddit"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "operation failed"
          }
        }
      }
    },
    "/api/random_category" : {
      "get" : {
        "tags" : [ "HomePage" ],
        "summary" : "get random category",
        "description" : "get a random subreddits from a random categories",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "return an array of subreddits.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/subreddit"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "operation failed"
          }
        }
      }
    },
    "/api/hide" : {
      "post" : {
        "tags" : [ "HomePage", "Posts and Interactions" ],
        "summary" : "hide a Post",
        "description" : "By passing in the appropriate options, current user can hide a certain link\n",
        "operationId" : "hidePost",
        "requestBody" : {
          "description" : "Post id to be hidden",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_hide_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Post is hidden"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "Post is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/unhide" : {
      "post" : {
        "tags" : [ "HomePage", "Posts and Interactions" ],
        "summary" : "unhide a post",
        "description" : "By passing in the appropriate options, current user can unhide a certain link\n",
        "operationId" : "unhidePost",
        "requestBody" : {
          "description" : "Post id to be unhidden",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_unhide_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Post is unhidden"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "Post is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/comment" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "user add a comment on a post",
        "description" : "add a comment to an existing post\n",
        "operationId" : "addComment",
        "requestBody" : {
          "description" : "post id to comment to",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/commentPostReplyCommentItems"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "comment is added"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/del" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "delete your post or comment",
        "description" : "delete a link you've written before\n",
        "operationId" : "deletePostComment",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_del_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "post or comment is deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "error in deletion"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/editusertext" : {
      "patch" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "user edit a text on a post",
        "description" : "edit what you write before\n",
        "operationId" : "editUserText",
        "requestBody" : {
          "description" : "post id to be edited",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/editItems"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "text is edited"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "post not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/follow_post" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "follow (put action = true) or unfollow (put action = false) post",
        "description" : "pass the post id and notifications will be sent to you.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_follow_post_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "post is followed succesfully"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "post is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/api/info" : {
      "get" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "Return a listing (posts and comments) of things in specific subreddit specified by their fullnames.",
        "description" : "Return a listing of things specified by their fullnames. Only Links, Comments, and Subreddits are allowed.\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "said312f,t1_bobose425f"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "example" : 4
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "example" : 10
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "example" : 50
          }
        }, {
          "name" : "id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "t3_234fds3,t3_abwo3er343425"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/commentOrReply"
                    }, {
                      "$ref" : "#/components/schemas/postItem"
                    } ]
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "list is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/lock" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "lock a link",
        "description" : "By passing in the appropriate options, moderator can prevents a post or new child comments from receiving new comments.\n",
        "operationId" : "lockLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_lock_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is locked"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/unlock" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "unlock a link",
        "description" : "By passing in the appropriate options, moderator can allow a post or comment to receive new comments.\n",
        "operationId" : "unlockLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_unlock_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is unlock"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/marknsfw" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "marknsfw a link",
        "description" : "By passing in the appropriate options, moderator can mark a link NSFW.\n",
        "operationId" : "marknsfwLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_marknsfw_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is marknsfw"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/unmarknsfw" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "unmarknsfw a link",
        "description" : "By passing in the appropriate options, moderator can remove the NSFW marking from a link.\n",
        "operationId" : "unmarknsfwLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_unmarknsfw_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is unmarknsfw"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/report" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "report a link",
        "description" : "By passing in the appropriate options, user can report a post.\n",
        "operationId" : "reportLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_report_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is reported"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/save" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "save a community",
        "description" : "By passing in the appropriate options, moderator can mark a link NSFW.\n",
        "operationId" : "saveCommunity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_save_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "comunity is saved"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/unsave" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "unsave a category",
        "description" : "By passing in the appropriate options, moderator can allow a post or comment to receive new comments.\n",
        "operationId" : "unsaveCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_unsave_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "category is unsaved"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "category is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/saved_categories" : {
      "get" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "get saved category",
        "description" : "get saved categories",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "Gaming"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "return an array of subreddits.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/subreddit"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "operation failed"
          }
        }
      }
    },
    "/api/sendreplaies/" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "description" : "send replaies to comments.",
        "responses" : {
          "200" : {
            "description" : "replay is saved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/message"
                }
              }
            }
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/set_suggested_sort" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "description" : "set sort type of comments in community.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_set_suggested_sort_body"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "operation done successfully"
          },
          "404" : {
            "description" : "Subreddit ID is not found."
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/spoiler" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "spoiler a link",
        "description" : "By passing in the appropriate options, moderator can mark a link spoiler.\n",
        "operationId" : "spoilerLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_spoiler_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is spoiler"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/unspoiler" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "unspoiler a link",
        "description" : "By passing in the appropriate options, moderator can mark a link unspoiler.\n",
        "operationId" : "unspoilerLink",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_unspoiler_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "link is unspoiler"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "link is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/submit" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "summary" : "create a post",
        "description" : "By passing in the appropriate options, current user can create a certain post, note that you should use formdata in this request not json\n",
        "operationId" : "createPost",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_submit_body"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "post is unsaved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/postItem"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/vote" : {
      "post" : {
        "tags" : [ "Posts and Interactions" ],
        "description" : "upvote (dir=1) or downvote(dir=-1) or cancel your upvote(0) or cancel your downvote (dir=2) and use fullnames to detect the passed thing in body whether its comment or post or something else.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_vote_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/insights_count/{post}" : {
      "get" : {
        "tags" : [ "Posts and Interactions" ],
        "description" : "by passing correct post id will return post insights",
        "operationId" : "post insights",
        "parameters" : [ {
          "name" : "post",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "succedded return the insights count",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          },
          "404" : {
            "description" : "post is not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/search" : {
      "get" : {
        "tags" : [ "Search" ],
        "description" : "will return posts in certain subreddit posts or subreddits or comments or users that are most related with the search query (q) if name of passed subreddit if exist and if subreddit isn't passed will return from random subreddits random posts \n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "description" : "the subreddit you want to search in",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "the query you search about it",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "tesla motors"
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "must one of this (relevance, hot, top, new, comments)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "top"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "comma-delimited list of result types (sr, link, user)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "link,user"
        } ],
        "responses" : {
          "200" : {
            "description" : "succeded get the random posts in the sub reddit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/getComponents"
                }
              }
            }
          },
          "404" : {
            "description" : "not found this subreddit"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/message/compose/" : {
      "post" : {
        "tags" : [ "Messages" ],
        "description" : "send a message  (note : disable sending message from                      subreddit to another subreddit)\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/message"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/del_msg" : {
      "post" : {
        "tags" : [ "Messages" ],
        "description" : "Delete messages from the recipient's view of their inbox.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_del_msg_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "404" : {
            "description" : "this messageID is not found"
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/message/inbox/" : {
      "get" : {
        "tags" : [ "Messages" ],
        "description" : "get all inbox messages of user.",
        "responses" : {
          "200" : {
            "description" : "return array of messages.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/message"
                }
              }
            }
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/report_msg" : {
      "post" : {
        "tags" : [ "Messages" ],
        "description" : "report a message",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_report_msg_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "404" : {
            "description" : "this messageID is not found"
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/message/unread/" : {
      "post" : {
        "tags" : [ "Messages" ],
        "description" : "make a message unread.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/message_unread_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "operation done successfully"
          },
          "404" : {
            "description" : "this messageID is not found"
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/message/sent/" : {
      "get" : {
        "tags" : [ "Messages" ],
        "description" : "get all message sent by user.",
        "responses" : {
          "200" : {
            "description" : "return array of messages.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/message"
                }
              }
            }
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/read_all_messages" : {
      "post" : {
        "tags" : [ "Messages" ],
        "description" : "make all messages read.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_read_all_messages_body"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "operation done successfully"
          },
          "404" : {
            "description" : "Account ID is not found."
          },
          "500" : {
            "description" : "operation failed"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/get_user_mentions" : {
      "post" : {
        "tags" : [ "Messages" ],
        "summary" : "get user mentions",
        "description" : "get user mentions\n",
        "operationId" : "getUserMentions",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_get_user_mentions_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "mentions not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/get_post_replies" : {
      "post" : {
        "tags" : [ "Messages" ],
        "summary" : "get post replies",
        "description" : "get all comments on your posts",
        "operationId" : "getPostReplies",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_get_post_replies_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "replies not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/get_comment_replies" : {
      "post" : {
        "tags" : [ "Messages" ],
        "summary" : "get comment replies",
        "description" : "get comment replies\n",
        "operationId" : "getCommentReplies",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_get_comment_replies_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "comment replies is showed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_4"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "replies not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/approve" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Approve a link or comment.\nIf the thing was removed, it will be re-inserted into appropriate listings. Any reports on the approved thing will be discarded.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/passCommentId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "succeded approve the link or comment"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/remove" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Remove a link, comment, or modmail message.\nIf the thing is a link, it will be removed from all subreddit listings. If the thing is a comment, it will be redacted and removed from all subreddit comment listings.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_remove_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "succeded removed the link, comment or modmail"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/show_comment" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Mark a comment that it should not be collapsed because of crowd control.The comment could still be collapsed for other reasons.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/passCommentId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Comment visibility edited successfully"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/api/accept_moderator_invite" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Accept an invite to moderate the specified subreddit.\nThe authenticated user must have been invited to moderate the subreddit by one of its current moderators.\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        } ],
        "responses" : {
          "200" : {
            "description" : "accepted the invitation"
          },
          "404" : {
            "description" : "not found this subreddit or not invited to moderate this subreddit"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/api/leavemoderator" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Abdicate moderator status in a subreddit.\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/passUserId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "accepted the abdication"
          },
          "404" : {
            "description" : "not found this subreddit"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/api/delete_sr_banner" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Remove the subreddit's custom mobile banner.\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        } ],
        "responses" : {
          "200" : {
            "description" : "deleted the sr banner"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/api/delete_sr_icon" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Remove the subreddit's custom mobile icon.\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "cars"
        } ],
        "responses" : {
          "200" : {
            "description" : "deleted the sr icon"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/site_admin" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "Create or configure a subreddit.\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_site_admin_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "succeeded configured the subreddit"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/[subreddit]/api/upload_sr_icon" : {
      "post" : {
        "tags" : [ "Moderation" ],
        "summary" : "upload community icon",
        "description" : "By passing in the appropriate options, current user can upload community icon, note that you should use formdata in this request not json\n",
        "operationId" : "uploadCommIcon",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/api_upload_sr_icon_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "icon is upload"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/edit" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "summary" : "get community settings",
        "description" : "Get community settings\n",
        "operationId" : "getCommSettings",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "settings are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/commSettings"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          },
          "404" : {
            "description" : "community is not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/subreddits/mine/moderator" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get subreddits the user is moderator at.\n",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "communities are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/communitySummary"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "communities are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/banned" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get banned users in a community\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "users are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/userItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or users are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "ban the user that is passed in request from subreddit passed in path\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/passUserId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfully banned the user"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or user is not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/muted" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get muted users in a community\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "example" : 4
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "users are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/userItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or users are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Moderation" ],
        "description" : "mute the user that passed in request from subreddit passed in path\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/passUserId"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successfully muted the user"
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or user is not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/moderators" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get moderators users in a community\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "users are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/userItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or users are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/unmoderated" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get unmoderated posts in a community\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "example" : 4
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "posts are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/postItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or posts are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/reports" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get reported posts in a community\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "example" : 4
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "posts are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/postItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or users are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/spam" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get Spam posts in a community\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "example" : 4
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "posts are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/postItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or users are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/r/{subreddit}/about/modqueue" : {
      "get" : {
        "tags" : [ "Moderation" ],
        "description" : "Get posts that require moderator review in a community.\n",
        "parameters" : [ {
          "name" : "subreddit",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "example" : "t5_imagepro"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number",
            "example" : 4
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 10
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "posts are sent in body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/postItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad request"
          },
          "404" : {
            "description" : "community or users are not found"
          },
          "401" : {
            "description" : "Access token is missing or invalid"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/api/all_notifications" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "description" : "get all notifications",
        "responses" : {
          "200" : {
            "description" : "Notifications updated successfully",
            "content" : {
              "application/json" : { }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "communityRules" : {
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "example" : "No Memes"
          },
          "description" : {
            "type" : "string",
            "example" : "no memes in this community"
          }
        }
      },
      "message" : {
        "type" : "object",
        "properties" : {
          "from_sr_Or_u" : {
            "type" : "string",
            "example" : "1"
          },
          "to_sr_Or_u" : {
            "type" : "string",
            "example" : "1"
          },
          "subject" : {
            "type" : "string",
            "example" : "Image Processing Lab"
          },
          "text" : {
            "type" : "string",
            "example" : "Hi Eng.mazen i have a problem in my assignment."
          },
          "fromID" : {
            "type" : "string",
            "example" : "t3_salama"
          },
          "toID" : {
            "type" : "string",
            "example" : "t3_karim"
          }
        }
      },
      "subreddit" : {
        "required" : [ "AllowImg&LinksUploads", "AllowMultipleImagePerPost", "FAQs", "NFSW", "SuggestedCommentSort", "category", "createdAt", "description", "name", "postType", "privacyType", "region", "welcomeMesssage" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "example" : "this community is for gamers"
          },
          "name" : {
            "type" : "string",
            "example" : "Gamers Field"
          },
          "welcomeMessage" : {
            "type" : "string",
            "example" : "welcome to our community"
          },
          "region" : {
            "type" : "string",
            "example" : "africa"
          },
          "privacyType" : {
            "type" : "string",
            "example" : "public"
          },
          "NFSW" : {
            "type" : "boolean",
            "example" : true
          },
          "postType" : {
            "type" : "number",
            "example" : 0
          },
          "AllowImg&LinksUploads" : {
            "type" : "boolean",
            "example" : true
          },
          "AllowMultipleImagePerPost" : {
            "type" : "boolean",
            "example" : false
          },
          "SuggestedCommentSort" : {
            "type" : "number",
            "example" : 0
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "category" : {
            "type" : "number",
            "example" : 0
          },
          "FAQs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/subreddit_FAQs"
            }
          },
          "communityRules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/communityRules"
            }
          }
        }
      },
      "blockUserItem" : {
        "required" : [ "userID" ],
        "type" : "object",
        "properties" : {
          "userID" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "referLinkItem" : {
        "required" : [ "category", "linkID" ],
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "category" : {
            "type" : "string",
            "example" : "Gaming"
          }
        }
      },
      "spamLinkItem" : {
        "required" : [ "linkID", "type" ],
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "spamText" : {
            "type" : "string",
            "example" : "I found that this content is showing violence"
          },
          "type" : {
            "type" : "string",
            "example" : "violent content"
          }
        }
      },
      "commSettings" : {
        "type" : "object",
        "properties" : {
          "region" : {
            "type" : "string",
            "example" : "Africa"
          },
          "nsfw" : {
            "type" : "boolean",
            "example" : true
          },
          "AllowMultipleImgPerPost" : {
            "type" : "boolean",
            "example" : true
          },
          "welcomeMessage" : {
            "type" : "string",
            "example" : "Hello, welcome to our community"
          },
          "privacyType" : {
            "type" : "string",
            "example" : "public"
          },
          "AllowImgAndLinksUploads" : {
            "type" : "boolean",
            "example" : false
          },
          "description" : {
            "type" : "string",
            "example" : "this is a community for fun!"
          },
          "postType" : {
            "type" : "string",
            "example" : "Any"
          },
          "suggestedCommentSort" : {
            "type" : "string",
            "example" : "old"
          },
          "spamsNumBeforeRemove" : {
            "type" : "integer",
            "example" : 15
          },
          "emailUserNameMention" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "savedCategoriesItem" : {
        "required" : [ "savedCategories" ],
        "type" : "object",
        "properties" : {
          "savedCategories" : {
            "type" : "string",
            "example" : "[\"Gaming\",\"Football\"]"
          }
        }
      },
      "postItem" : {
        "type" : "object",
        "properties" : {
          "attachments" : {
            "type" : "string",
            "description" : "To access these files, access them as a link,\nexample: to show photo.jpg in html, src=\"/public/posts/files/photo.jpg\"\n",
            "example" : "[\"photo.jpg\",\"code.cpp\"]"
          },
          "postID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "votesCount" : {
            "type" : "number",
            "example" : 1
          },
          "userID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "userName" : {
            "type" : "string",
            "description" : "the name of the user that will be displayed and if the user hover it will request by user id",
            "example" : "u/North-Situation4034"
          },
          "communityID" : {
            "type" : "string",
            "description" : "maybe not sent",
            "format" : "uuid"
          },
          "communityName" : {
            "type" : "string",
            "description" : "the name that will be displayed if the post realted to certain subreddit and if the user hover it, will request by the community id"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "text" : {
            "type" : "string",
            "example" : "This is a post text"
          },
          "title" : {
            "type" : "string",
            "example" : "This is a post title"
          },
          "nsfw" : {
            "type" : "boolean",
            "example" : true
          },
          "spoiler" : {
            "type" : "boolean",
            "example" : false
          },
          "flairID" : {
            "type" : "string",
            "example" : "id1"
          },
          "flairText" : {
            "type" : "string",
            "example" : "Hero"
          },
          "comments" : {
            "type" : "array",
            "description" : "these comments will displayed in case of post page or profile or we will get just the number of it in case of feed or search",
            "items" : {
              "$ref" : "#/components/schemas/commentItem"
            }
          }
        }
      },
      "communitySummary" : {
        "type" : "object",
        "properties" : {
          "image" : {
            "type" : "string",
            "example" : "icon.jpg"
          },
          "communityID" : {
            "type" : "string",
            "description" : "maybe not sent",
            "format" : "uuid"
          },
          "description" : {
            "type" : "string",
            "example" : "This is a community description"
          },
          "name" : {
            "type" : "string",
            "example" : "This is a community name"
          },
          "category" : {
            "type" : "string",
            "example" : "Gaming"
          }
        }
      },
      "userItem" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "type" : "string",
            "description" : "To access these files, access them as a link,\nexample: to show photo.jpg in html, src=\"/public/users/files/photo.jpg\"\n",
            "example" : "photo.jpg"
          },
          "userID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "username" : {
            "type" : "string",
            "example" : "/u/moaz"
          }
        }
      },
      "userItemForSearch" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "type" : "string",
            "description" : "To access these files, access them as a link,\nexample: to show photo.jpg in html, src=\"/public/users/files/photo.jpg\"\n",
            "example" : "photo.jpg"
          },
          "userID" : {
            "type" : "string",
            "description" : "the id that will be used if the user redirected to this user page or requested to follow it",
            "format" : "uuid"
          },
          "username" : {
            "type" : "string",
            "example" : "/u/moaz"
          },
          "totalKarmas" : {
            "type" : "integer"
          },
          "about" : {
            "type" : "string",
            "description" : "this is about of the user that he did wrote in his profile and it is desplayed in search results if it's exist"
          }
        }
      },
      "passCommentId" : {
        "required" : [ "CommentID" ],
        "type" : "object",
        "properties" : {
          "CommentID" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "passUserId" : {
        "required" : [ "userID" ],
        "type" : "object",
        "properties" : {
          "userID" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "getPosts" : {
        "required" : [ "data", "kind" ],
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/getPosts_data"
          }
        }
      },
      "editItems" : {
        "required" : [ "linkId" ],
        "type" : "object",
        "properties" : {
          "linkId" : {
            "type" : "string",
            "example" : "t3_54148d012f459b337e2382ce"
          },
          "text" : {
            "type" : "string",
            "example" : "This is a text"
          }
        }
      },
      "commentPostReplyCommentItems" : {
        "required" : [ "linkId" ],
        "type" : "object",
        "properties" : {
          "linkId" : {
            "type" : "string",
            "example" : "t3_54148d012f459b337e2382ce"
          },
          "text" : {
            "type" : "string",
            "example" : "This is a text"
          }
        }
      },
      "getLinks" : {
        "required" : [ "data", "kind" ],
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/getLinks_data"
          }
        }
      },
      "linkItem" : {
        "required" : [ "communityID", "createdAt", "linkID", "text", "userID", "votesCount" ],
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "votesCount" : {
            "type" : "number",
            "example" : 45
          },
          "userID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "communityID" : {
            "type" : "string",
            "description" : "maybe not sent",
            "format" : "uuid"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "text" : {
            "type" : "string",
            "example" : "This is a post text"
          }
        }
      },
      "userPrefs" : {
        "type" : "object",
        "properties" : {
          "numComments" : {
            "type" : "boolean",
            "description" : "limit num of comments to see in post",
            "example" : false
          },
          "threadedMessages" : {
            "type" : "boolean",
            "description" : "Show message conversations in the inbox or not",
            "example" : false
          },
          "showLinkFlair" : {
            "type" : "boolean",
            "description" : "show the flair of the post",
            "example" : false
          },
          "countryCode" : {
            "type" : "string",
            "example" : "PS"
          },
          "emailCommentReply" : {
            "type" : "boolean",
            "description" : "send email to user if a reply is made",
            "example" : false
          },
          "emailUpvoteComment" : {
            "type" : "boolean",
            "example" : false
          },
          "emailMessages" : {
            "type" : "boolean",
            "description" : "send mail to user if a meesage is send",
            "example" : false
          },
          "emailUnsubscribeAll" : {
            "type" : "boolean",
            "description" : "unsubscribe from all emails",
            "example" : false
          },
          "emailUpvotePost" : {
            "type" : "boolean",
            "example" : false
          },
          "emailUsernameMention" : {
            "type" : "boolean",
            "example" : false
          },
          "emailUserNewFollower" : {
            "type" : "boolean",
            "example" : false
          },
          "emailPostReply" : {
            "type" : "boolean",
            "example" : false
          },
          "emailPrivateMessage" : {
            "type" : "boolean",
            "example" : false
          },
          "over18" : {
            "type" : "boolean",
            "example" : false
          },
          "newwindow" : {
            "type" : "boolean",
            "example" : false
          },
          "labelNsfw" : {
            "type" : "boolean",
            "example" : false
          },
          "liveOrangeReds" : {
            "type" : "boolean",
            "description" : "send message notifaction in my browser",
            "example" : false
          },
          "markMessageRead" : {
            "type" : "boolean",
            "example" : false
          },
          "enableFollwers" : {
            "type" : "boolean",
            "description" : "do not allow people to follow the user, if disabled",
            "example" : false
          },
          "publicVotes" : {
            "type" : "boolean",
            "description" : "if true, no. of votes is showed",
            "example" : false
          },
          "showLocationBasedRecommendations" : {
            "type" : "boolean",
            "example" : false
          },
          "searchIncludeOver18" : {
            "type" : "boolean",
            "example" : false
          },
          "defaultCommentSort" : {
            "type" : "string",
            "example" : "best"
          },
          "langauge" : {
            "type" : "string",
            "example" : "en"
          }
        }
      },
      "getAbout" : {
        "required" : [ "data", "kind" ],
        "type" : "object",
        "properties" : {
          "kind" : {
            "type" : "string"
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/aboutItem"
            }
          }
        }
      },
      "aboutItem" : {
        "type" : "object",
        "properties" : {
          "avatar" : {
            "type" : "string",
            "description" : "To access these files, access them as a link,\nexample: to show photo.jpg in html, src=\"/public/users/files/photo.jpg\"\n",
            "example" : "photo.jpg"
          },
          "prefShowTrending" : {
            "type" : "boolean",
            "example" : false
          },
          "isBanned" : {
            "type" : "boolean",
            "example" : false
          },
          "isMuted" : {
            "type" : "boolean",
            "example" : false
          },
          "isBlocked" : {
            "type" : "boolean",
            "example" : false
          },
          "verified" : {
            "type" : "boolean",
            "example" : false
          },
          "newModmailExists" : {
            "type" : "boolean",
            "example" : false
          },
          "userId" : {
            "type" : "string",
            "example" : "dgsfs5fafd6"
          },
          "canCreateSubreddit" : {
            "type" : "boolean",
            "example" : false
          },
          "over18" : {
            "type" : "boolean",
            "example" : false
          },
          "isMod" : {
            "type" : "boolean",
            "example" : false
          },
          "hasVerifiedEmail" : {
            "type" : "boolean",
            "example" : false
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "name" : {
            "type" : "string",
            "example" : "shredan"
          },
          "inboxCount" : {
            "type" : "number",
            "example" : 12
          },
          "totalKarma" : {
            "type" : "boolean",
            "example" : false
          },
          "linkKarma" : {
            "type" : "number",
            "example" : 1
          },
          "hasSubscribed" : {
            "type" : "boolean",
            "example" : false
          },
          "acceptFollowers" : {
            "type" : "boolean",
            "example" : false
          },
          "commentKarma" : {
            "type" : "number",
            "example" : 1
          },
          "passwordSet" : {
            "type" : "boolean",
            "description" : "password reset in case you're signing in normally without using gmail.",
            "example" : false
          },
          "hasModMail" : {
            "type" : "boolean",
            "example" : false
          },
          "email" : {
            "type" : "string",
            "example" : "shredan@gmail.com"
          }
        }
      },
      "resetPassword" : {
        "required" : [ "confirmNewPassword", "currentPassword", "newPassword" ],
        "type" : "object",
        "properties" : {
          "currentPassword" : {
            "type" : "string",
            "example" : "eghh433w"
          },
          "newPassword" : {
            "type" : "string",
            "example" : "gy76563rc"
          },
          "confirmNewPassword" : {
            "type" : "string",
            "example" : "gy76563rc"
          }
        }
      },
      "commentOrReply" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/commentOrReply_inner"
        }
      },
      "post" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/post_inner"
        }
      },
      "subreddits" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/subreddits_inner"
        }
      },
      "getComponents" : {
        "type" : "array",
        "items" : {
          "oneOf" : [ {
            "$ref" : "#/components/schemas/userItemForSearch"
          }, {
            "$ref" : "#/components/schemas/postItem"
          }, {
            "$ref" : "#/components/schemas/subredditItem"
          }, {
            "$ref" : "#/components/schemas/commentItem"
          } ]
        }
      },
      "subredditItem" : {
        "type" : "object",
        "properties" : {
          "communityID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "communityName" : {
            "type" : "string",
            "description" : "the name that will be displayed",
            "example" : "r/teslamotors"
          },
          "communityIcon" : {
            "type" : "string"
          },
          "communityDescription" : {
            "type" : "string"
          },
          "membersCount" : {
            "type" : "integer"
          }
        }
      },
      "postItemForSearchComments" : {
        "type" : "object",
        "properties" : {
          "postID" : {
            "type" : "string",
            "format" : "uuid"
          },
          "votesCount" : {
            "type" : "number",
            "example" : 1
          },
          "userName" : {
            "type" : "string",
            "description" : "this is th user name will be displayed"
          },
          "userId" : {
            "type" : "string",
            "description" : "this is id that will be put in the request body if the user hover the user name",
            "format" : "uuid"
          },
          "subredditName" : {
            "type" : "string",
            "description" : "the subreddit name that will be displayed in the search results"
          },
          "subredditID" : {
            "type" : "string",
            "description" : "this is id that will be put in the request body if the user hover the subreddit name",
            "format" : "uuid"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "text" : {
            "type" : "string",
            "example" : "This is a post text"
          },
          "title" : {
            "type" : "string",
            "example" : "This is a post title"
          },
          "nsfw" : {
            "type" : "boolean",
            "example" : true
          },
          "spoiler" : {
            "type" : "boolean",
            "example" : false
          },
          "commentsNum" : {
            "type" : "integer",
            "description" : "only what we need is the number of commments as the all comments doesn't appear until request for the post"
          }
        }
      },
      "commentItem" : {
        "type" : "object",
        "properties" : {
          "commentId" : {
            "type" : "string",
            "format" : "uuid"
          },
          "commentText" : {
            "type" : "string"
          },
          "votesCount" : {
            "type" : "integer",
            "description" : "the subtraction of upVotes - downvotes"
          },
          "createdAt" : {
            "type" : "integer"
          },
          "editedAt" : {
            "type" : "integer",
            "description" : "will contain the time of last date or null if it wasn't edited"
          },
          "post" : {
            "$ref" : "#/components/schemas/postItemForSearchComments"
          },
          "user" : {
            "$ref" : "#/components/schemas/userItem"
          }
        }
      },
      "login_body" : {
        "type" : "object",
        "properties" : {
          "password" : {
            "type" : "string",
            "description" : "a valid (at least 8) string containing at least one special character and at least one uppercase character.",
            "format" : "uuid"
          },
          "username" : {
            "type" : "string",
            "description" : "an existing username",
            "format" : "uuid"
          }
        }
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          },
          "expiresIn" : {
            "type" : "integer",
            "description" : "example 3600 (in seconds)"
          }
        }
      },
      "signup_body" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "valid email as karimmagzdy@gmail.com",
            "format" : "uuid"
          },
          "password" : {
            "type" : "string",
            "description" : "a valid (at least 8) string containing at least one special character and at least one uppercase character.",
            "format" : "uuid"
          },
          "username" : {
            "type" : "string",
            "description" : "a unique string as kikz this user name doesn't exist in the database.",
            "format" : "uuid"
          }
        }
      },
      "login_forget_body" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "example" : "karim@gmail.com"
          },
          "operation" : {
            "type" : "boolean",
            "example" : true
          },
          "username" : {
            "type" : "string",
            "example" : "karim2423"
          }
        }
      },
      "api_friend_body" : {
        "type" : "object",
        "properties" : {
          "bancontext" : {
            "type" : "string",
            "description" : "this is the full name of the target user (receiver)",
            "example" : "t2_54148d012f459b337e2382ce"
          },
          "ban_message" : {
            "type" : "string"
          },
          "ban_reason" : {
            "type" : "string"
          },
          "duration" : {
            "type" : "integer",
            "description" : "the duration that is the relation will take place"
          },
          "name" : {
            "type" : "string",
            "description" : "this is the name of the current user or subreddit (sender)",
            "example" : "u/north_Situation2810"
          },
          "note" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "description" : "it's one of these values [\"friend\", \"moderator\", \"moderator_invite\", \"contributor\", \"banned, muted\"]\n"
          }
        }
      },
      "api_unfriend_body" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "the id of the receiver",
            "example" : "t2_54148d012f459b337e2382ce"
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the current user (sender)",
            "example" : "u/north_Situation2810"
          },
          "type" : {
            "type" : "string",
            "description" : "it's one of these values [\"friend\", \"moderator\", \"moderator_invite\", \"contributor\", \"banned, muted\"]\n"
          }
        }
      },
      "inline_response_200_1" : {
        "type" : "object",
        "properties" : {
          "postArr" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/postItem"
            }
          }
        }
      },
      "api_subscribe_body" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "type" : "string",
            "example" : "sub"
          },
          "sr_name" : {
            "type" : "string",
            "description" : "subreddit ID",
            "example" : "programmingC++"
          }
        }
      },
      "api_hide_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_unhide_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_del_body" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "t3_asdad"
          }
        }
      },
      "inline_response_200_2" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        },
        "description" : "post id/ comment id to be deleted"
      },
      "api_follow_post_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          },
          "action" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "api_lock_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_unlock_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_marknsfw_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_unmarknsfw_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_report_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_save_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "programmingJava"
          }
        }
      },
      "api_unsave_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "programmingInC#"
          }
        }
      },
      "api_set_suggested_sort_body" : {
        "type" : "object",
        "properties" : {
          "sr_name:" : {
            "type" : "string",
            "example" : "t5_imagepro"
          },
          "suggested_comment_sort" : {
            "type" : "string",
            "example" : "old"
          }
        }
      },
      "api_spoiler_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_unspoiler_body" : {
        "type" : "object",
        "properties" : {
          "linkID" : {
            "type" : "string",
            "example" : "t3_tuut677t554"
          }
        }
      },
      "api_submit_body" : {
        "type" : "object",
        "properties" : {
          "communityID" : {
            "type" : "string",
            "description" : "maybe not sent, example, t5_f5247d112f459a83712683e4",
            "format" : "uuid"
          },
          "text" : {
            "type" : "string",
            "description" : "This is a post text"
          },
          "attachments" : {
            "type" : "string",
            "description" : "This parameter can be written multiple times to attach multiple atachments via upload, type of this parameter is file\n",
            "format" : "binary"
          },
          "title" : {
            "type" : "string",
            "description" : "This is a post title"
          },
          "nsfw" : {
            "type" : "boolean",
            "description" : "Value [true]"
          },
          "spoiler" : {
            "type" : "boolean",
            "description" : "Value [false]"
          },
          "flairID" : {
            "type" : "string",
            "description" : "id1"
          },
          "flairText" : {
            "type" : "string",
            "description" : "Hero"
          }
        }
      },
      "api_vote_body" : {
        "type" : "object",
        "properties" : {
          "postId" : {
            "type" : "string",
            "example" : "t3_54148d012f459b337e2382ce"
          },
          "dir" : {
            "type" : "number",
            "example" : 1
          }
        }
      },
      "inline_response_200_3" : {
        "type" : "object",
        "properties" : {
          "insightsCount" : {
            "type" : "integer",
            "example" : 50
          }
        }
      },
      "api_del_msg_body" : {
        "type" : "object",
        "properties" : {
          "msg_id:" : {
            "type" : "string",
            "example" : "t4_54148d012f459b337e2382ce"
          }
        }
      },
      "api_report_msg_body" : {
        "type" : "object",
        "properties" : {
          "msg_id:" : {
            "type" : "string",
            "example" : "t4_54148d012f459b337e2382ce"
          }
        }
      },
      "message_unread_body" : {
        "type" : "object",
        "properties" : {
          "msg_id:" : {
            "type" : "string",
            "example" : "t4_54148d012f459b337e2382ce"
          }
        }
      },
      "api_read_all_messages_body" : {
        "type" : "object",
        "properties" : {
          "user_id:" : {
            "type" : "string",
            "example" : "t2_sharif"
          }
        }
      },
      "api_get_user_mentions_body" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "example" : "t2_AHmedLotfy02"
          }
        }
      },
      "apiget_user_mentions_data" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "t1_54148d012f459b337e2382ce"
          },
          "text" : {
            "type" : "string",
            "example" : "This is a text!"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "commentsNum" : {
            "type" : "number",
            "example" : 45
          }
        }
      },
      "inline_response_200_4" : {
        "type" : "object",
        "properties" : {
          "postTitle" : {
            "type" : "string"
          },
          "fromId" : {
            "type" : "string"
          },
          "toId" : {
            "type" : "string"
          },
          "data" : {
            "$ref" : "#/components/schemas/apiget_user_mentions_data"
          }
        }
      },
      "api_get_post_replies_body" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "example" : "t2_AHmedLotfy02"
          }
        }
      },
      "api_get_comment_replies_body" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "example" : "t2_AHmedLotfy02"
          }
        }
      },
      "api_remove_body" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "spam" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "api_site_admin_body" : {
        "type" : "object",
        "properties" : {
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/commSettings"
            }
          }
        }
      },
      "api_upload_sr_icon_body" : {
        "type" : "object",
        "properties" : {
          "communityID" : {
            "type" : "string",
            "description" : "t5_f5247d112f459a83712683e4",
            "format" : "uuid"
          },
          "attachments" : {
            "type" : "string",
            "description" : "Type of this parameter is file\n",
            "format" : "binary"
          }
        }
      },
      "subreddit_FAQs" : {
        "type" : "object",
        "properties" : {
          "question" : {
            "type" : "string",
            "example" : "who is nabil"
          },
          "answer" : {
            "type" : "string",
            "example" : "he is a type of fossils"
          }
        }
      },
      "getPosts_data" : {
        "type" : "object",
        "properties" : {
          "dist" : {
            "type" : "integer"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/postItem"
            }
          }
        }
      },
      "getLinks_data" : {
        "type" : "object",
        "properties" : {
          "dist" : {
            "type" : "integer"
          },
          "children" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/linkItem"
            }
          }
        }
      },
      "commentOrReply_inner" : {
        "type" : "object",
        "properties" : {
          "pointNumber" : {
            "type" : "number"
          },
          "data" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "t1_54148d012f459b337e2382ce"
              },
              "text" : {
                "type" : "string",
                "example" : "This is a text!"
              },
              "createdAt" : {
                "type" : "string",
                "format" : "date-time"
              },
              "commentsNum" : {
                "type" : "number",
                "example" : 45
              }
            }
          }
        }
      },
      "post_inner" : {
        "type" : "object",
        "properties" : {
          "postTitle" : {
            "type" : "string"
          },
          "postVotes" : {
            "type" : "number"
          },
          "data" : {
            "type" : "object",
            "properties" : {
              "id" : {
                "type" : "string",
                "example" : "t1_54148d012f459b337e2382ce"
              },
              "text" : {
                "type" : "string",
                "example" : "This is a text!"
              },
              "createdAt" : {
                "type" : "string",
                "format" : "date-time"
              },
              "commentsNum" : {
                "type" : "number",
                "example" : 45
              }
            }
          }
        }
      },
      "subreddits_inner" : {
        "type" : "object",
        "properties" : {
          "communityId" : {
            "type" : "string",
            "example" : "t1_54148d012f459b337e2382ce"
          },
          "name" : {
            "type" : "string"
          },
          "memberCount" : {
            "type" : "number",
            "example" : 552
          },
          "rank" : {
            "type" : "number"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "icon" : {
            "type" : "string",
            "description" : "To access these files, access them as a link,\nexample: to show photo.jpg in html, src=\"/public/users/files/photo.jpg\"\n",
            "example" : "photo.jpg"
          },
          "banner" : {
            "type" : "string",
            "description" : "To access these files, access them as a link,\nexample: to show photo.jpg in html, src=\"/public/users/files/photo.jpg\"\n",
            "example" : "photo.jpg"
          },
          "communityRules" : {
            "type" : "object",
            "properties" : {
              "title" : {
                "type" : "string"
              },
              "textDescription" : {
                "type" : "string",
                "example" : "This is a text!"
              }
            }
          },
          "FAQs" : {
            "type" : "object",
            "properties" : {
              "question" : {
                "type" : "string"
              },
              "answer" : {
                "type" : "string"
              }
            }
          },
          "communityOptions" : {
            "type" : "object",
            "properties" : {
              "privacyType" : {
                "type" : "string"
              },
              "region" : {
                "type" : "string"
              },
              "postType" : {
                "type" : "string"
              },
              "allowImgLinkUploads" : {
                "type" : "boolean"
              },
              "suggestedCommentSort" : {
                "type" : "string"
              },
              "allowMultipleImagePerPost" : {
                "type" : "boolean"
              },
              "welcomeMessage" : {
                "type" : "boolean"
              },
              "NSFW" : {
                "type" : "boolean"
              },
              "emailUserNameMention" : {
                "type" : "boolean"
              },
              "optionsDescription" : {
                "type" : "string"
              }
            }
          },
          "communityDescription" : {
            "type" : "string"
          }
        }
      }
    },
    "responses" : {
      "UnauthorizedError" : {
        "description" : "Access token is missing or invalid"
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "description" : "Standard Authorization header using the Bearer scheme. Example: \\\"bearer {JWTToken}\\\"\n",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}